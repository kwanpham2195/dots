# Screen-like Control
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix
set -g base-index 1           # start windows numbering at 1
setw -g pane-base-index 1     # make pane numbering consistent with windows

bind m set -gF mouse "#{?mouse,off,on}" # Toggle mouse on/off

setw -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed

set -g default-terminal xterm-256color
set-option -ga terminal-overrides ",xterm-256color:Tc"
set-option -g status-position bottom
set -g status-keys vi
set -g history-limit 100000

set-option -g set-titles on

set-option -g focus-events on

setw -g mode-keys vi
setw -g monitor-activity on

# copy mode
bind Enter copy-mode # enter copy mode
run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'
run -b 'tmux bind -t vi-copy L end-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'
# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# buffers
bind b list-buffers  # list paste buffers
bind p paste-buffer  # paste from the top paste buffer
bind P choose-buffer # choose which buffer to paste from

# create session
bind C-c new-session
# find session
bind -r f command-prompt -p find-session 'switch-client -t %%'
bind-key -n F3 choose-session

# switch to last active window
bind Tab last-window

# Split window
bind-key v split-window -h -c "#{pane_current_path}"
bind-key s split-window -v -c "#{pane_current_path}"

# pane resizing
bind -r H resize-pane -L 6
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Smart pane switching with awareness of Vim splits and fzf.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim_or_fzf="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$' \
    || ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE 'fzf'" # check for fzf
bind-key -n 'C-h' if-shell "$is_vim_or_fzf" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim_or_fzf" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim_or_fzf" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim_or_fzf" 'send-keys C-l'  'select-pane -R'

bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one
set -g display-panes-time 2000
set -g pane-base-index 1

# Use Alt-arrow keys without prefix key to switch panes
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# Alt arrow to switch windows
bind -n M-p previous-window
bind -n M-n next-window

set -sg escape-time 0 # No delay for escape key press
set -sg repeat-time 300 # increase repeat timeout

# Start a floating pane
bind-key p if-shell -F '#{==:#{session_name},floating}' {
    detach-client
} {
    popup -d '#{pane_current_path}' -xC -yC -w80% -h80% 'tmux new -A -s floating'
}

bind-key T run-shell 'tmux_popup tig'

# Reload tmux config
bind r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'

bind-key -n F2 run-shell "tmux neww tmux-sessionizer.sh"

# tmux-thumbs settings
set -g @thumbs-command 'echo -n {} | ccopy'

# NOTE: you can use vars with $<var> and ${<var>} as long as the str is double quoted: ""
# WARNING: hex colors can't contain capital letters

# --> Catppuccin (Macchiato)
thm_bg="#24273a"
thm_fg="#cad3f5"
thm_cyan="#91d7e3"
thm_black="#1e2030"
thm_gray="#363a4f"
thm_magenta="#c6a0f6"
thm_pink="#f5bde6"
thm_red="#ed8796"
thm_green="#a6da95"
thm_yellow="#eed49f"
thm_blue="#8aadf4"
thm_orange="#f5a97f"
thm_black4="#5b6078"

# ----------------------------=== Theme ===--------------------------

# status
set -g status-position bottom
set -g status "on"
set -g status-bg "${thm_bg}"
set -g status-style bg=default
set -g status-justify "centre"
set -g status-left-length "90"
set -g status-right-length "90"
set -g status-left-style NONE
set -g status-right-style NONE
setw -g window-status-separator ""

# messages
set -g message-style fg="${thm_cyan}",bg="${thm_gray}",align="centre"
set -g message-command-style fg="${thm_cyan}",bg="${thm_gray}",align="centre"

# panes
set -g pane-border-style fg="${thm_gray}"
set -g pane-active-border-style fg="${thm_blue}"

# windows
setw -g window-status-activity-style fg="${thm_fg}",bg="${thm_bg}",none
setw -g window-status-separator ""
setw -g window-status-style fg="${thm_fg}",bg="${thm_bg}",none

# --------=== Statusline

set -g status-left ""
set -g status-right ""

# current_dir
setw -g window-status-format "#[fg=$thm_bg,bg=$thm_blue] #I  #W #F"
setw -g window-status-current-format "#[fg=$thm_bg,bg=$thm_orange] #S | #I #W #F"

# --------=== Modes
setw -g clock-mode-colour "${thm_blue}"
setw -g mode-style "fg=${thm_pink} bg=${thm_black4} bold"

# --------=== Copy last command output
# Adopted from https://ianthehenry.com/posts/tmux-copy-last-command/

# jump to the previous prompt
bind -n M-Up {
  copy-mode
  # send -X start-of-line
  send -X start-of-line
  # send -X cursor-up
  send -X cursor-up
  # send -X start-of-line
  send -X start-of-line
  send -X search-backward-text "❯ "
  send -X stop-selection
  send -X -N 1 cursor-down
}

# jump to the next prompt
bind -n M-Down {
  copy-mode
  send -X search-forward-text "❯ "
  send -X stop-selection
  send -X -N 1 cursor-down
  send -X start-of-line
}

# select the "block" above the cursor, where "block" is either a command (text
# after a prompt) or a series of output lines (contiguous chunk of text with
# no prompt)
bind -n S-M-Up {
  copy-mode
  send -X clear-selection

  # Doing this twice in a row is code for "go to the start
  # of the soft-wrapped line." You cannot get the same effect
  # with -N 2. This effectively puts us at the start of the
  # current line, even if it is a command input that has wrapped
  # over the edge of the screen.
  send -X start-of-line
  send -X start-of-line

  # Two times cursor up due to multi line prompt
  send -X cursor-up
  send -X cursor-up
  send -X start-of-line
  send -X start-of-line

  # note that ${copy_cursor_line} is the displayed line, not the physical
  # line. so this won't detect that we're on a prompt in the case of a
  # partial line output right before us, or in the case that the arrow is
  # soft-wrapped to be on a new line
  if -F "#{m:*❯ *,#{copy_cursor_line}}" {
    # if you're on a prompt line, select the text after the prompt
    send -X search-forward-text "❯ "
    send -X stop-selection
    send -X -N 2 cursor-right
    send -X begin-selection
    # run it twice to handle soft-wrapped lines
    send -X end-of-line
    send -X end-of-line

    # remove this block in mode-keys emacs
    # if "#{m:*❯ ?*,#{copy_cursor_line}}" {
    #   send -X cursor-left
    # }
  } {
    send -X end-of-line
    send -X end-of-line

    # on emacs, you have to move one more to the right to select the
    # newline character. this is not necessary in vi mode.
    # send -X cursor-right

    # yes, it would be nice to use select-line, but the trick to move by
    # physical lines doesn't work in visual line mode
    send -X begin-selection
    send -X search-backward-text "❯ "
    send -X end-of-line
    send -X end-of-line
    send -X cursor-right
    send -X stop-selection
  }
}

# List of plugins
# Tmux key bindings for quick opening of a highlighted file or url
set -g @plugin 'tmux-plugins/tmux-open'
# A lightning fast version of tmux-fingers written in Rust for copy pasting with vimium/vimperator like hints.
set -g @plugin 'fcsonline/tmux-thumbs'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
