services:
  # '<gitDomain>': '<provider>:<webDomain>'
git:
  commitPrefix:
    - pattern: "^\\w+\\/(\\w+-\\w+).*"
      replace: "[$1] "
    - pattern: "^([^_]+)_.*" # Take all text prior to the first underscore
      replace: "[$1] "

customCommands:
  - key: "E"
    description: "Add empty commit"
    context: "commits"
    command: 'git commit --allow-empty -m "empty commit"'
    loadingText: "Committing empty commit..."

  - key: "K"
    description: "Disentangle: Squash all changes into a single commit and rebase onto the selected branch"
    context: localBranches
    command: |
      #!/bin/bash

      # Set the base branch
      BASE_BRANCH="{{.SelectedLocalBranch.Name}}"

      # Check if the working tree is dirty
      if [[ -n $(git status --porcelain) ]]; then
          echo "Error: Working tree is dirty. Please commit or stash your changes before running this script."
          exit 1
      fi

      # Get the merge base commit
      merge_base=$(git merge-base $BASE_BRANCH HEAD)

      # Get the first commit hash, message, and author details
      first_commit_hash=$(git rev-list --reverse $merge_base..HEAD | head -n 1)
      first_commit_message=$(git log -1 --format=%B $first_commit_hash)

      # Reset to the merge base
      git reset $merge_base

      # Stage all changes
      git add -A

      # Create a new commit with all the changes, using the first commit's message and author
      GIT_AUTHOR_NAME="$(git log -1 --format='%an' $first_commit_hash)" \
      GIT_AUTHOR_EMAIL="$(git log -1 --format='%ae' $first_commit_hash)" \
      git commit -m "$first_commit_message"

      # Rebase onto the base branch
      git rebase $BASE_BRANCH

  # retrieved from: https://github.com/jesseduffield/lazygit/wiki/Custom-Commands-Compendium#conventional-commit
  - key: "<c-v>"
    context: "global"
    description: "Create new conventional commit"
    prompts:
      - type: "menu"
        key: "Type"
        title: "Type of change"
        options:
          - name: "build"
            description: "Changes that affect the build system or external dependencies"
            value: "build"
          - name: "feat"
            description: "A new feature"
            value: "feat"
          - name: "fix"
            description: "A bug fix"
            value: "fix"
          - name: "chore"
            description: "Other changes that don't modify src or test files"
            value: "chore"
          - name: "ci"
            description: "Changes to CI configuration files and scripts"
            value: "ci"
          - name: "docs"
            description: "Documentation only changes"
            value: "docs"
          - name: "perf"
            description: "A code change that improves performance"
            value: "perf"
          - name: "refactor"
            description: "A code change that neither fixes a bug nor adds a feature"
            value: "refactor"
          - name: "revert"
            description: "Reverts a previous commit"
            value: "revert"
          - name: "style"
            description: "Changes that do not affect the meaning of the code"
            value: "style"
          - name: "test"
            description: "Adding missing tests or correcting existing tests"
            value: "test"
      - type: "input"
        title: "Scope"
        key: "Scope"
        initialValue: ""
      - type: "menu"
        key: "Breaking"
        title: "Breaking change"
        options:
          - name: "no"
            value: ""
          - name: "yes"
            value: "!"
      - type: "input"
        title: "message"
        key: "Message"
        initialValue: ""
      - type: "confirm"
        key: "Confirm"
        title: "Commit"
        body: "Are you sure you want to commit?"
    command: "git commit --message '{{.Form.Type}}{{ if .Form.Scope }}({{ .Form.Scope }}){{ end }}{{.Form.Breaking}}: {{.Form.Message}}'"
    loadingText: "Creating conventional commit..."

  # Pruning branches no longer on the remote.
  - key: "G"
    command: |
      git fetch -p && for branch in $(git for-each-ref --format '%(refname) %(upstream:track)' refs/heads | awk '$2 == "[gone]" {sub("refs/heads/", "", $1); print $1}'); do git branch -D $branch; done
    context: "localBranches"
    description: "Prune local branches no longer on its remote; (G)one."
    loadingText: "Pruning gone..."
